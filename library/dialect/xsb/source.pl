/*  Part of SWI-Prolog

    Author:        Jan Wielemaker
    E-mail:        J.Wielemaker@vu.nl
    WWW:           http://www.swi-prolog.org
    Copyright (c)  2019, VU University Amsterdam
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in
       the documentation and/or other materials provided with the
       distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
*/

:- module(xsb_source, []).
:- use_module(library(debug)).
:- use_module(library(lists)).

/** <module> Support XSB source .P files

This module is a lightweight module that  allows loading .P files as XSB
source files. This module is intended  to be loaded from ``~/.swiplrc``,
providing transparent usage of XSB files  with neglectable impact impact
if no XSB sources are used.
*/

:- multifile
    user:prolog_file_type/2,
    user:term_expansion/2.

user:prolog_file_type('P', prolog).

user:term_expansion(begin_of_file, Out) :-
    prolog_load_context(file, File),
    file_name_extension(Path, 'P', File),
    include_options(File, Include),
    compiler_options(COptions),
    append(Include, COptions, Extra),
    (   is_xsb_module(File)
    ->  file_base_name(Path, Module),
        debug(xsb, 'Loading ~p into XSB module ~p~n', [File, Module]),
        Out = [ (:- module(Module, [])),
                (:- expects_dialect(xsb))
              | Extra
              ]
    ;   debug(xsb, 'Loading ~p in XSB mode', [File]),
        Out = [ (:- expects_dialect(xsb))
              | Extra
              ]
    ).

include_options(File, Option) :-
    (   xsb_header_file(File, FileH)
    ->  Option = [(:- include(FileH))]
    ;   Option = []
    ).

:- multifile xsb:xsb_compiler_option/1.
:- dynamic   xsb:xsb_compiler_option/1.

compiler_options(Directives) :-
    findall(D, mapped_xsb_option(D), Directives).

mapped_xsb_option((:- D)) :-
    xsb:xsb_compiler_option(O),
    map_compiler_option(O, D).

map_compiler_option(singleton_warnings_off, style_check(-singleton)).
map_compiler_option(optimize,               set_prolog_flag(optimise, true)).

xsb_header_file(File, FileH) :-
    file_name_extension(Base, _, File),
    file_name_extension(Base, 'H', FileH),
    exists_file(FileH).


%!  is_xsb_module(+File) is semidet.
%
%   True if the file being  loaded  is   an  XSB  module  file, which is
%   claimed to be the case  if  it   contains  at  least one `:- export`
%   directive. If a matching .H file is   found this is checked first as
%   this is the usual location of the export directive.
%
%   @bug The input stream must be repositionable, tests do not deal
%   with export declarations generated by pre-processing, including
%   other files or export declarations that fail to process due to
%   syntax errors.

is_xsb_module(File) :-
    setup_call_cleanup(
        '$push_input_context'(xsb_find_export),
        is_xsb_module_aux(File),
        '$pop_input_context').

is_xsb_module_aux(File) :-
    xsb_header_file(File, FileH),
    setup_call_cleanup(
        open(FileH, read, In),
        find_export(In),
        close(In)),
    !.
is_xsb_module_aux(_File) :-
    prolog_load_context(stream, In),
    setup_call_cleanup(
        stream_property(In, position(Pos)),
        find_export(In),
        set_stream_position(In, Pos)).

find_export(In) :-
    repeat,
        read_term(In, Term,
                  [ syntax_errors(quiet),
                    module(xsb_source)
                  ]),
        (   Term == end_of_file
        ->  !, fail
        ;   subsumes_term((:- export(_)), Term)
        ->  !
        ;   fail
        ).

% define the typical XSB operators to limit syntax errors while
% scanning for :- export(_).
:- op(1050,  fy, import).
:- op(1100,  fx, export).
:- op(1100,  fx, mode).
:- op(1040, xfx, from).
